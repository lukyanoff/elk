filter {
  if [type] == "lynis-report" {
    mutate {
      gsub => ["message", "=", "=<"]
    }
    multiline {
       negate => true
       pattern => "^# Lynis Report"
       what => 'previous'
    }
    kv {
      include_keys => ["auditor", "report_datetime_start",
       "lynis_version", "report_version_major", "report_version_minor",
       "os", "os_name", "os_fullname", "os_version", "linux_version",
       "binaries_count", "installed_packages_array",
       "network_ipv4_address", "network_ipv6_address",
       "exception_event", "suggestion", "warning",
       "tests_executed", "tests_skipped"
       ]
      field_split => "\r\n"
      trim => "<>\[\],"
      trimkey => "<>\[\],"
      allow_duplicate_values => false
    }
    anonymize {
        algorithm => "IPV4_NETWORK"
        fields => ["network_ipv4_address"]
        key => "16"  # subnet prefix length, 16: 255.255.255.255 -> 255.255.0.0
    }
    date {
      match => [ "report_datetime_start", "YYYY-MM-dd HH:mm:ss" ]
    }
    grok {
      match => [ 'path', "%{GREEDYDATA}/%{GREEDYDATA:host}/lynis-report.dat" ]
      overwrite => ['host']
    }
    ruby {
#      event['suggestion'].each do |str|
#       event['suggestion']['parsed] = str.scan(/([A-Z]{4}-\d{4})|(.+)/).map { |(t,d| { test => t, description => d} }
#      end
     code => "
           if event['suggestion'].kind_of?(Array)
            event['suggestion_count'] = event['suggestion'].count
           elsif event['suggestion'].kind_of?(String)
            event['suggestion_count']=1
           end
           if event['warning'].kind_of?(Array)
            event['warning_count'] = event['warning'].count
           elsif event['warning'].kind_of?(String)
            event['warning_count']=1
           end
       "
    }
    mutate {
      convert => {
        "@version" => "integer"
        "binaries_count" => "integer"
        "report_version_major" => "integer"
        "report_version_minor" => "integer"
        "suggestion_count" => "integer"
        "warning_count" => "integer"
      }
      split => {
        "tests_executed" => "|"
        "tests_skipped" => "|"
        "installed_packages_array" => "|"
      }
    }
    # geoip {
    #   source => "serverip"
    #   target => "geoip"
    # }
  }
}
